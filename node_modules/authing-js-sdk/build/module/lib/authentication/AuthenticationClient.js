var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { AuthenticationTokenProvider } from './AuthenticationTokenProvider';
import { bindEmail, bindPhone, checkLoginStatus, checkPasswordStrength, listUserAuthorizedResources, loginByEmail, loginByPhoneCode, loginByPhonePassword, loginBySubAccount, loginByUsername, refreshToken, registerByEmail, registerByPhoneCode, registerByUsername, removeUdv, resetPassword, sendEmail, setUdv, setUdvBatch, udv, unbindEmail, unbindPhone, updateEmail, updatePassword, updatePhone, updateUser, user } from '../graphqlapi';
import { GraphqlClient } from '../common/GraphqlClient';
import { PasswordSecurityLevel } from './types';
import { UdfTargetType } from '../../types/graphql.v2';
import { QrCodeAuthenticationClient } from './QrCodeAuthenticationClient';
import { MfaAuthenticationClient } from './MfaAuthenticationClient';
import { HttpClient, NaiveHttpClient } from '../common/HttpClient';
import { convertUdv, convertUdvToKeyValuePair, encrypt, formatAuthorizedResources } from '../utils';
import jwtDecode from 'jwt-decode';
import { SocialAuthenticationClient } from './SocialAuthenticationClient';
import { PublicKeyManager } from '../common/PublicKeyManager';
import { EnterpriseAuthenticationClient } from './EnterpriseAuthenticationClient';
import { BaseAuthenticationClient } from './BaseAuthenticationClient';
var DEFAULT_OPTIONS = {
    appId: undefined,
    appHost: undefined,
    protocol: 'oidc',
    tokenEndPointAuthMethod: 'client_secret_post',
    introspectionEndPointAuthMethod: 'client_secret_post',
    revocationEndPointAuthMethod: 'client_secret_post',
    timeout: 10000,
    onError: function (code, message, data) {
        throw { code: code, message: message, data: data };
    },
    requestFrom: 'sdk',
    encryptFunction: encrypt,
    host: 'https://core.authing.cn'
};
/**
 * @class AuthenticationClient 认证核心模块
 * @description 此模块包含注册登录、重置手机号邮箱、修改账号信息等方法，是以你的终端用户（End User）的身份进行请求，适合在需要验证用户身份的情况下使用。
 *
 * @example
 *
 * 使用方法：
 *
 * \`\`\`javascript
 * import { AuthenticationClient } from "authing-js-sdk"
 * const authenticationClient = new AuthenticationClient({
 *    appId: "YOUR_APP_ID",
 * })
 * authenticationClient.registerByEmail // 使用邮箱注册
 * authenticationClient.loginByEmail // 使用邮箱登录
 * \`\`\`
 *
 *
 * @name AuthenticationClient
 */
var AuthenticationClient = /** @class */ (function () {
    function AuthenticationClient(options) {
        this.options = Object.assign({}, DEFAULT_OPTIONS, options);
        this.baseClient = new BaseAuthenticationClient(this.options);
        var graphqlEndpoint = this.baseClient.appHost + "/graphql/v2";
        // 子模块初始化顺序: GraphqlClient -> ManagementTokenProvider -> Others
        this.graphqlClient = new (this.options.graphqlClient || GraphqlClient)(graphqlEndpoint, this.options);
        this.tokenProvider = new (this.options.tokenProvider ||
            AuthenticationTokenProvider)(this.options);
        this.httpClient = new (this.options.httpClient || HttpClient)(this.options, this.tokenProvider);
        this.naiveHttpClient = new NaiveHttpClient(this.options, this.tokenProvider);
        this.publicKeyManager = new PublicKeyManager(this.options, this.httpClient);
        this.wxqrcode = new QrCodeAuthenticationClient(this.options, this.tokenProvider, this.httpClient, 'WXAPP_AUTH');
        this.qrcode = new QrCodeAuthenticationClient(this.options, this.tokenProvider, this.httpClient, 'APP_AUTH');
        this.mfa = new MfaAuthenticationClient(this.options, this.tokenProvider, this.httpClient);
        this.social = new SocialAuthenticationClient(this.options, this.tokenProvider, this.httpClient);
        this.enterprise = new EnterpriseAuthenticationClient(this.options, this.tokenProvider, this.httpClient);
        if (this.options.token) {
            this.setToken(this.options.token);
        }
    }
    AuthenticationClient.prototype.checkLoggedIn = function () {
        var _a;
        var user = this.tokenProvider.getUser();
        if (user) {
            return user.id;
        }
        var token = this.tokenProvider.getToken();
        if (!token) {
            throw new Error('请先登录！');
        }
        var decoded = jwtDecode(token);
        var userId = decoded.sub || ((_a = decoded.data) === null || _a === void 0 ? void 0 : _a.id);
        if (!userId) {
            throw new Error('不合法的 accessToken');
        }
        return userId;
    };
    AuthenticationClient.prototype.setCurrentUser = function (user) {
        this.tokenProvider.setUser(user);
    };
    AuthenticationClient.prototype.setToken = function (token) {
        this.tokenProvider.setToken(token);
    };
    /**
     * @name registerByEmail
     * @name_zh 使用邮箱注册
     * @description 使用邮箱注册，此接口不要求用户对邮箱进行验证，用户注册之后 emailVerified 字段会为 false 。如果你希望邮箱未验证的用户不能进行登录，可以使用 pipeline 对此类请求进行拦截。
     *
     * @param {string} email 邮箱
     * @param {string} password 密码
     * @param {RegisterProfile} [profile] 用户资料
     * @param {Object} [options]
     * @param {boolean} [options.forceLogin] 是否走一遍完整的登录的，会触发登录前后的 pipeline 函数以及登录事件 webhook ，同时该用户的累计登录次数会加 1 。默认为 false 。
     * @param {boolean} [options.generateToken] 是否为该用户生成 token，不会触发登录后的完整流程，用户的累计登录次数不会加 1。默认为 false 。
     * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。
     *
     * @example
     *
     * authenticationClient.registerByEmail(
     *  'test@example.com',
     *  'passw0rd',
     *  {
     *    nickname: 'Nick'
     *  },
     *  {
     *    generateToken: true
     *  }
     * )
     *
     * @example
     * authenticationClient.registerByEmail('test@example.com', 'passw0rd')
     *
     *
     * @returns {Promise<User>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.registerByEmail = function (email, password, profile, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, forceLogin, _b, generateToken, clientIp, params, context, _c, _d, _e, extraParams, extraContext, user;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        options = options || {};
                        profile = profile || {};
                        _a = options.forceLogin, forceLogin = _a === void 0 ? false : _a, _b = options.generateToken, generateToken = _b === void 0 ? false : _b, clientIp = options.clientIp, params = options.params, context = options.context;
                        _d = (_c = this.options).encryptFunction;
                        _e = [password];
                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];
                    case 1: return [4 /*yield*/, _d.apply(_c, _e.concat([_f.sent()]))];
                    case 2:
                        password = _f.sent();
                        extraParams = null;
                        if (params) {
                            extraParams = JSON.stringify(params);
                        }
                        extraContext = null;
                        if (context) {
                            extraContext = JSON.stringify(context);
                        }
                        return [4 /*yield*/, registerByEmail(this.graphqlClient, this.tokenProvider, {
                                input: {
                                    email: email,
                                    password: password,
                                    profile: profile,
                                    forceLogin: forceLogin,
                                    generateToken: generateToken,
                                    clientIp: clientIp,
                                    params: extraParams,
                                    context: extraContext
                                }
                            })];
                    case 3:
                        user = (_f.sent()).registerByEmail;
                        this.setCurrentUser(user);
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * @name registerByUsername
     * @name_zh 使用用户名注册
     * @description 使用用户名注册
     *
     * @param {string} username 用户名
     * @param {string} password 密码
     * @param {RegisterProfile} [profile] 用户资料
     * @param {Object} [options]
     * @param {boolean} [options.forceLogin] 是否走一遍完整的登录的，会触发登录前后的 pipeline 函数以及登录事件 webhook ，同时该用户的累计登录次数会加 1 。默认为 false 。
     * @param {boolean} [options.generateToken] 是否为该用户生成 token，不会触发登录后的完整流程，用户的累计登录次数不会加 1。默认为 false 。
     * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。
     *
     *
     * @example
     *
     * authenticationClient.registerByUsername(
     *  'bob',
     *  'passw0rd',
     *  {
     *    nickname: 'Nick'
     *  },
     *  {
     *    generateToken: true
     *  }
     * )
     *
     * @example
     * authenticationClient.registerByUsername('bob', 'passw0rd')
     *
     *
     * @returns {Promise<User>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.registerByUsername = function (username, password, profile, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, forceLogin, _b, generateToken, clientIp, params, context, _c, _d, _e, extraParams, extraContext, user;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        options = options || {};
                        profile = profile || {};
                        _a = options.forceLogin, forceLogin = _a === void 0 ? false : _a, _b = options.generateToken, generateToken = _b === void 0 ? false : _b, clientIp = options.clientIp, params = options.params, context = options.context;
                        _d = (_c = this.options).encryptFunction;
                        _e = [password];
                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];
                    case 1: return [4 /*yield*/, _d.apply(_c, _e.concat([_f.sent()]))];
                    case 2:
                        password = _f.sent();
                        extraParams = null;
                        if (params) {
                            extraParams = JSON.stringify(params);
                        }
                        extraContext = null;
                        if (context) {
                            extraContext = JSON.stringify(context);
                        }
                        return [4 /*yield*/, registerByUsername(this.graphqlClient, this.tokenProvider, {
                                input: {
                                    username: username,
                                    password: password,
                                    profile: profile,
                                    forceLogin: forceLogin,
                                    generateToken: generateToken,
                                    clientIp: clientIp,
                                    params: extraParams,
                                    context: extraContext
                                }
                            })];
                    case 3:
                        user = (_f.sent()).registerByUsername;
                        this.setCurrentUser(user);
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * @name registerByPhoneCode
     * @name_zh 使用手机号注册
     * @description 使用手机号注册，你可以同时设置该账号的初始密码。发送短信的接口请见 sendSmsCode
     *
     * @param {string} phone 手机号
     * @param {string} code 短信验证码
     * @param {string} password 初始密码
     * @param {RegisterProfile} [profile] 用户资料
     * @param {Object} [options]
     * @param {boolean} [options.forceLogin] 是否走一遍完整的登录的，会触发登录前后的 pipeline 函数以及登录事件 webhook ，同时该用户的累计登录次数会加 1 。默认为 false 。
     * @param {boolean} [options.generateToken] 是否为该用户生成 token，不会触发登录后的完整流程，用户的累计登录次数不会加 1。默认为 false 。
     * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。
     *
     * @example
     *
     * authenticationClient.registerByPhoneCode(
     *  '176xxxx7041',
     *  '1234',
     *  'passw0rd',
     *  {
     *    nickname: 'Nick'
     *  },
     *  {
     *    generateToken: true
     *  }
     * )
     *
     * @example
     * authenticationClient.registerByPhoneCode('176xxxx7041', '1234')
     *
     *
     * @returns {Promise<User>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.registerByPhoneCode = function (phone, code, password, profile, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, forceLogin, _b, generateToken, clientIp, params, context, _c, _d, _e, extraParams, extraContext, user;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        options = options || {};
                        profile = profile || {};
                        _a = options.forceLogin, forceLogin = _a === void 0 ? false : _a, _b = options.generateToken, generateToken = _b === void 0 ? false : _b, clientIp = options.clientIp, params = options.params, context = options.context;
                        if (!password) return [3 /*break*/, 3];
                        _d = (_c = this.options).encryptFunction;
                        _e = [password];
                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];
                    case 1: return [4 /*yield*/, _d.apply(_c, _e.concat([_f.sent()]))];
                    case 2:
                        password = _f.sent();
                        _f.label = 3;
                    case 3:
                        extraParams = null;
                        if (params) {
                            extraParams = JSON.stringify(params);
                        }
                        extraContext = null;
                        if (context) {
                            extraContext = JSON.stringify(context);
                        }
                        return [4 /*yield*/, registerByPhoneCode(this.graphqlClient, this.tokenProvider, {
                                input: {
                                    phone: phone,
                                    code: code,
                                    password: password,
                                    profile: profile,
                                    forceLogin: forceLogin,
                                    generateToken: generateToken,
                                    clientIp: clientIp,
                                    params: extraParams,
                                    context: extraContext
                                }
                            })];
                    case 4:
                        user = (_f.sent()).registerByPhoneCode;
                        this.setCurrentUser(user);
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * @name checkPasswordStrength
     * @name_zh 检查密码强度
     * @description 检查密码强度，详情请见: https://docs.authing.co/security/config-user-pool-password-level.html
     *
     * @param {string} password
     * @example
     * authenticationClient.checkPasswordStrength('weak')
     *
     * @example
     * authenticationClient.checkPasswordStrength('strongPassw0rd!')
     *
     * @returns {Promise<CheckPasswordStrengthResult>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.checkPasswordStrength = function (password) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, checkPasswordStrength(this.graphqlClient, this.tokenProvider, { password: password })];
                    case 1:
                        result = (_a.sent()).checkPasswordStrength;
                        return [2 /*return*/, result];
                }
            });
        });
    };
    /**
     * @name sendSmsCode
     * @name_zh 发送短信验证码
     * @description 发送短信验证码, 短信验证码的有效时间为 60 s。
     *
     * @param {string} phone
     * @example
     * authenticationClient.sendSmsCode('176xxxx6754')
     *
     * @returns {Promise<CommonMessage>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.sendSmsCode = function (phone) {
        return __awaiter(this, void 0, void 0, function () {
            var api, data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        api = this.baseClient.appHost + "/api/v2/sms/send";
                        return [4 /*yield*/, this.httpClient.request({
                                method: 'POST',
                                url: api,
                                data: { phone: phone }
                            })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @name loginByEmail
     * @name_zh 使用邮箱登录
     * @description 使用邮箱登录，该接口默认不会限制未验证的邮箱进行登录，如果你希望邮箱未验证的用户不能进行登录，可以使用 pipeline 对此类请求进行拦截。
     *
     * 如果你的用户池配置了登录失败检测，当同一  IP 下登录多次失败的时候会要求用户输入图形验证码（code 为 2000)。
     *
     * @param {string} email 邮箱
     * @param {string} password 密码
     * @param {Object} [options]
     * @param {boolean} [options.autoRegister] 是否自动注册。如果检测到用户不存在，会根据登录账密自动创建一个账号。
     * @param {string} [options.captchaCode] 图形验证码
     * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。
     *
     * @example
     *
     * authenticationClient.loginByEmail(
     *  'test@example.com',
     *  'passw0rd',
     *  {
     *    autoRegister: true，
     *    captchaCode: 'xj72'
     *  }
     * )
     *
     * @example
     * authenticationClient.loginByEmail('test@example.com', 'passw0rd')
     *
     *
     * @returns {Promise<User>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.loginByEmail = function (email, password, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, autoRegister, captchaCode, clientIp, params, context, _b, _c, _d, extraParams, extraContext, user;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        options = options || {};
                        _a = options.autoRegister, autoRegister = _a === void 0 ? false : _a, captchaCode = options.captchaCode, clientIp = options.clientIp, params = options.params, context = options.context;
                        _c = (_b = this.options).encryptFunction;
                        _d = [password];
                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];
                    case 1: return [4 /*yield*/, _c.apply(_b, _d.concat([_e.sent()]))];
                    case 2:
                        password = _e.sent();
                        extraParams = null;
                        if (params) {
                            extraParams = JSON.stringify(params);
                        }
                        extraContext = null;
                        if (context) {
                            extraContext = JSON.stringify(context);
                        }
                        return [4 /*yield*/, loginByEmail(this.graphqlClient, this.tokenProvider, {
                                input: {
                                    email: email,
                                    password: password,
                                    autoRegister: autoRegister,
                                    captchaCode: captchaCode,
                                    clientIp: clientIp,
                                    params: extraParams,
                                    context: extraContext
                                }
                            })];
                    case 3:
                        user = (_e.sent()).loginByEmail;
                        this.setCurrentUser(user);
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * @name loginByUsername
     * @name_zh 使用用户名登录
     * @description 使用用户名登录。
     *
     * 如果你的用户池配置了登录失败检测，当同一  IP 下登录多次失败的时候会要求用户输入图形验证码（code 为 2000)。
     *
     * @param {string} username 用户名
     * @param {string} password 密码
     * @param {Object} [options]
     * @param {boolean} [options.autoRegister] 是否自动注册。如果检测到用户不存在，会根据登录账密自动创建一个账号。
     * @param {string} [options.captchaCode] 图形验证码
     * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。
     *
     *
     * @example
     *
     * authenticationClient.loginByEmail(
     *  'test@example.com',
     *  'passw0rd',
     *  {
     *    autoRegister: true，
     *    captchaCode: 'xj72'
     *  }
     * )
     *
     * @example
     * authenticationClient.loginByEmail('test@example.com', 'passw0rd')
     *
     *
     * @returns {Promise<User>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.loginByUsername = function (username, password, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, autoRegister, captchaCode, clientIp, params, context, _b, _c, _d, extraParams, extraContext, user;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        options = options || {};
                        _a = options.autoRegister, autoRegister = _a === void 0 ? false : _a, captchaCode = options.captchaCode, clientIp = options.clientIp, params = options.params, context = options.context;
                        _c = (_b = this.options).encryptFunction;
                        _d = [password];
                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];
                    case 1: return [4 /*yield*/, _c.apply(_b, _d.concat([_e.sent()]))];
                    case 2:
                        password = _e.sent();
                        extraParams = null;
                        if (params) {
                            extraParams = JSON.stringify(params);
                        }
                        extraContext = null;
                        if (context) {
                            extraContext = JSON.stringify(context);
                        }
                        return [4 /*yield*/, loginByUsername(this.graphqlClient, this.tokenProvider, {
                                input: {
                                    username: username,
                                    password: password,
                                    autoRegister: autoRegister,
                                    captchaCode: captchaCode,
                                    clientIp: clientIp,
                                    params: extraParams,
                                    context: extraContext
                                }
                            })];
                    case 3:
                        user = (_e.sent()).loginByUsername;
                        this.setCurrentUser(user);
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * @name loginByPhoneCode
     * @name_zh 使用手机号验证码登录
     * @description 使用手机号验证码登录。
     *
     *
     * @param {string} phone 手机号
     * @param {string} code 短信验证码
     * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。
     *
     * @example
     *
     * authenticationClient.loginByPhoneCode(
     *  '176xxxx7041',
     *  '1234',
     * )
     *
     *
     * @returns {Promise<User>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.loginByPhoneCode = function (phone, code, options) {
        return __awaiter(this, void 0, void 0, function () {
            var clientIp, params, context, extraParams, extraContext, user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = options || {};
                        clientIp = options.clientIp, params = options.params, context = options.context;
                        extraParams = null;
                        if (params) {
                            extraParams = JSON.stringify(params);
                        }
                        extraContext = null;
                        if (context) {
                            extraContext = JSON.stringify(context);
                        }
                        return [4 /*yield*/, loginByPhoneCode(this.graphqlClient, this.tokenProvider, {
                                input: {
                                    phone: phone,
                                    code: code,
                                    clientIp: clientIp,
                                    params: extraParams,
                                    context: extraContext
                                }
                            })];
                    case 1:
                        user = (_a.sent()).loginByPhoneCode;
                        this.setCurrentUser(user);
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * @name loginByPhonePassword
     * @name_zh 使用手机号密码登录
     * @description 使用手机号密码登录。
     *
     *
     * @param {string} phone 手机号
     * @param {string} password 密码
     * @param {Object} [options]
     * @param {string} [options.captchaCode] 图形验证码
     * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。
     *
     * @example
     *
     * authenticationClient.loginByPhonePassword(
     *  '176xxxx7041',
     *  'passw0rd',
     *  {
     *    captchaCode: 'xj72'
     *  }
     * )
     *
     * @example
     * authenticationClient.loginByPhonePassword('176xxxx7041', 'passw0rd')
     *
     *
     * @returns {Promise<User>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.loginByPhonePassword = function (phone, password, options) {
        return __awaiter(this, void 0, void 0, function () {
            var captchaCode, _a, autoRegister, clientIp, params, context, _b, _c, _d, extraParams, extraContext, user;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        options = options || {};
                        captchaCode = options.captchaCode, _a = options.autoRegister, autoRegister = _a === void 0 ? false : _a, clientIp = options.clientIp, params = options.params, context = options.context;
                        _c = (_b = this.options).encryptFunction;
                        _d = [password];
                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];
                    case 1: return [4 /*yield*/, _c.apply(_b, _d.concat([_e.sent()]))];
                    case 2:
                        password = _e.sent();
                        extraParams = null;
                        if (params) {
                            extraParams = JSON.stringify(params);
                        }
                        extraContext = null;
                        if (context) {
                            extraContext = JSON.stringify(context);
                        }
                        return [4 /*yield*/, loginByPhonePassword(this.graphqlClient, this.tokenProvider, {
                                input: {
                                    phone: phone,
                                    password: password,
                                    captchaCode: captchaCode,
                                    autoRegister: autoRegister,
                                    clientIp: clientIp,
                                    params: extraParams,
                                    context: extraContext
                                }
                            })];
                    case 3:
                        user = (_e.sent()).loginByPhonePassword;
                        this.setCurrentUser(user);
                        return [2 /*return*/, user];
                }
            });
        });
    };
    AuthenticationClient.prototype.loginBySubAccount = function (account, password, options) {
        return __awaiter(this, void 0, void 0, function () {
            var captchaCode, clientIp, _a, _b, _c, user;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        options = options || {};
                        captchaCode = options.captchaCode, clientIp = options.clientIp;
                        _b = (_a = this.options).encryptFunction;
                        _c = [password];
                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];
                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([_d.sent()]))];
                    case 2:
                        password = _d.sent();
                        return [4 /*yield*/, loginBySubAccount(this.graphqlClient, this.tokenProvider, {
                                account: account,
                                password: password,
                                captchaCode: captchaCode,
                                clientIp: clientIp
                            })];
                    case 3:
                        user = (_d.sent()).loginBySubAccount;
                        this.setCurrentUser(user);
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * @name checkLoginStatus
     * @name_zh 检测 Token 登录状态
     * @description 检测 Token 登录状态
     *
     * @param {string} token 用户的登录凭证 token
     *
     * @example
     *
     * authenticationClient.checkLoginStatus('TOKEN')
     *
     * @returns {Promise<JwtTokenStatus>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.checkLoginStatus = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, checkLoginStatus(this.graphqlClient, this.tokenProvider, {
                            token: token
                        })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.checkLoginStatus];
                }
            });
        });
    };
    /**
     * @name sendEmail
     * @name_zh 发送邮件
     * @description 发送邮件
     *
     * @param {string} email 邮箱
     * @param {EmailScene} scene 发送场景，可选值为 RESET_PASSWORD（发送重置密码邮件，邮件中包含验证码）、VerifyEmail（发送验证邮箱的邮件）、ChangeEmail（发送修改邮箱邮件，邮件中包含验证码）
     *
     * @example
     *
     * import { EmailScene } from "authing-js-sdk"
     * authenticationClient.sendEmail('test@example.com', EmailScene.RESET_PASSWORD)
     *
     * @returns {Promise<CommonMessage>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.sendEmail = function (email, scene) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, sendEmail(this.graphqlClient, this.tokenProvider, { email: email, scene: scene })];
                    case 1:
                        data = (_a.sent()).sendEmail;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @name resetPasswordByPhoneCode
     * @name_zh 通过短信验证码重置密码
     * @description 通过短信验证码重置密码，你需要先调用 sendSmsCode 接口发送重置密码邮件。
     *
     * @param {string} phone 手机号
     * @param {string} code 验证码
     * @param {string} newPassword 新的密码
     *
     * @example
     *
     * authenticationClient.resetPasswordByPhoneCode('176xxxx7041', '1234', 'passw0rd')
     *
     * @returns {Promise<CommonMessage>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.resetPasswordByPhoneCode = function (phone, code, newPassword) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, data;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _b = (_a = this.options).encryptFunction;
                        _c = [newPassword];
                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];
                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([_d.sent()]))];
                    case 2:
                        newPassword = _d.sent();
                        return [4 /*yield*/, resetPassword(this.graphqlClient, this.tokenProvider, {
                                phone: phone,
                                code: code,
                                newPassword: newPassword
                            })];
                    case 3:
                        data = (_d.sent()).resetPassword;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @name resetPasswordByEmailCode
     * @name_zh 通过邮件验证码重置密码
     * @description 通过邮件验证码重置密码，你需要先调用 sendEmail 接口发送重置密码邮件。
     *
     * @param {string} phone 手机号
     * @param {string} code 验证码
     * @param {string} newPassword 新的密码
     *
     * @example
     *
     * authenticationClient.resetPasswordByEmailCode('test@example.com', '1234', 'passw0rd')
     *
     * @returns {Promise<CommonMessage>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.resetPasswordByEmailCode = function (email, code, newPassword) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, data;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _b = (_a = this.options).encryptFunction;
                        _c = [newPassword];
                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];
                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([_d.sent()]))];
                    case 2:
                        newPassword = _d.sent();
                        return [4 /*yield*/, resetPassword(this.graphqlClient, this.tokenProvider, {
                                email: email,
                                code: code,
                                newPassword: newPassword
                            })];
                    case 3:
                        data = (_d.sent()).resetPassword;
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @name updateProfile
     * @name_zh 修改用户资料
     * @description 修改用户资料，此接口不能用于修改手机号、邮箱、密码，如果需要请调用 updatePhone、updateEmail、updatePassword 接口。
     *
     * @param {UpdateUserInput} updates 修改的用户资料
     * @param {string} updates.username 用户名
     * @param {string} updates.nickname 昵称
     * @param {string} updates.photo 头像
     * @param {string} updates.company 公司
     * @param {string} updates.browser 浏览器
     * @param {string} updates.device 设备
     * @param {string} updates.lastIP 最近登录的 IP
     * @param {string} updates.name Name
     * @param {string} updates.givenName Given Name
     * @param {string} updates.familyName Family Name
     * @param {string} updates.middleName Middle Name
     * @param {string} updates.profile Profile Url
     * @param {string} updates.preferredUsername Preferred Name
     * @param {string} updates.website 个人网站
     * @param {string} updates.gender 性别, F 表示男性、W 表示女性、未知表示 U
     * @param {string} updates.birthdate 生日
     * @param {string} updates.zoneinfo 时区
     * @param {string} updates.locale 语言
     * @param {string} updates.address 地址
     * @param {string} updates.streetAddress 街道地址
     * @param {string} updates.locality
     * @param {string} updates.region 地域
     * @param {string} updates.postalCode 邮编
     * @param {string} updates.city 城市
     * @param {string} updates.province 省份
     * @param {string} updates.country 国家
     *
     * @example
     *
     * authenticationClient.updateProfile({
     *  nickname: "Nick",
     *  lastIp: "111.111.111.111"
     * })
     *
     * @returns {Promise<User>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.updateProfile = function (updates) {
        return __awaiter(this, void 0, void 0, function () {
            var userId, updated;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = this.checkLoggedIn();
                        if (updates && updates.password) {
                            delete updates.password;
                        }
                        return [4 /*yield*/, updateUser(this.graphqlClient, this.tokenProvider, {
                                id: userId,
                                input: updates
                            })];
                    case 1:
                        updated = (_a.sent()).updateUser;
                        this.setCurrentUser(updated);
                        return [2 /*return*/, updated];
                }
            });
        });
    };
    /**
     * @name updatePassword
     * @name_zh 更新用户密码
     * @description 更新用户密码
     *
     * @param {string} newPassword 新密码
     * @param {string} [oldPassword] 旧密码，如果用户没有设置密码，可以不填。
     *
     * @example
     *
     * authenticationClient.updatePassword('passw0rd') // 由手机号、社会化登录等其他方式注册的，首次没有设置密码，oldPassword 留空。
     *
     * @example
     *
     * authenticationClient.updatePassword('passw0rd', 'oldPassw0rd') // 用户之前设置了密码
     *
     * @returns {Promise<User>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.updatePassword = function (newPassword, oldPassword) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d, _e, _f, _g, _h, user;
            return __generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        _a = newPassword;
                        if (!_a) return [3 /*break*/, 3];
                        _c = (_b = this.options).encryptFunction;
                        _d = [newPassword];
                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];
                    case 1: return [4 /*yield*/, _c.apply(_b, _d.concat([_j.sent()]))];
                    case 2:
                        _a = (_j.sent());
                        _j.label = 3;
                    case 3:
                        newPassword = _a;
                        _e = oldPassword;
                        if (!_e) return [3 /*break*/, 6];
                        _g = (_f = this.options).encryptFunction;
                        _h = [oldPassword];
                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];
                    case 4: return [4 /*yield*/, _g.apply(_f, _h.concat([_j.sent()]))];
                    case 5:
                        _e = (_j.sent());
                        _j.label = 6;
                    case 6:
                        oldPassword = _e;
                        return [4 /*yield*/, updatePassword(this.graphqlClient, this.tokenProvider, {
                                newPassword: newPassword,
                                oldPassword: oldPassword
                            })];
                    case 7:
                        user = (_j.sent()).updatePassword;
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * @name updatePhone
     * @name_zh 更新用户手机号
     * @description 更新用户手机号。和修改邮箱一样，默认情况下，如果用户当前已经绑定了手机号，需要同时验证原有手机号（目前账号绑定的手机号）和当前邮箱（将要绑定的手机号）。
     * 也就是说，用户 A 当前绑定的手机号为 15888888888，想修改为 15899999999，那么就需要同时验证这两个手机号。
     * 开发者也可以选择不开启 “验证原有手机号“ ，可以在 Authing 控制台 的 设置目录下的安全信息模块进行关闭。
     * 用户首次绑定手机号请使用 bindPhone 接口。
     *
     * @param {string} phone 新手机号
     * @param {string} phoneCode 新手机号的验证码
     * @param {string} [oldPhone] 旧手机号
     * @param {string} [oldPhoneCode] 旧手机号的验证码
     *
     * @example
     *
     * authenticationClient.updatePhone('176xxxx7041', '1234') // 关闭了“验证原有手机号“选项
     *
     * @example
     *
     * authenticationClient.updatePhone('176xxxx7041', '1234', '156xxxx9876', '1234') // 开启了“验证原有手机号“选项
     *
     *
     * @returns {Promise<User>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.updatePhone = function (phone, phoneCode, oldPhone, oldPhoneCode) {
        return __awaiter(this, void 0, void 0, function () {
            var user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, updatePhone(this.graphqlClient, this.tokenProvider, {
                            phone: phone,
                            phoneCode: phoneCode,
                            oldPhone: oldPhone,
                            oldPhoneCode: oldPhoneCode
                        })];
                    case 1:
                        user = (_a.sent()).updatePhone;
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * @name updateEmail
     * @name_zh 更新用户邮箱
     * @description 如果用户已经绑定了邮箱，默认情况下，需要同时验证原有邮箱（目前账号绑定的邮箱）和当前邮箱（将要绑定的邮箱）。也就是说，用户 A 当前绑定的邮箱为 123456@qq.com，想修改为 1234567@qq.com，那么就需要同时验证这两个邮箱。
     * 开发者也可以选择不开启 “验证原有邮箱“ ，可以在 Authing 控制台 的 设置目录下的安全信息模块进行关闭。
     * 用户首次绑定手机号请使用 bindEmail 接口。
     *
     * @param {string} email 新邮箱
     * @param {string} emailCode 新邮箱的验证码
     * @param {string} [oldEmail] 旧邮箱
     * @param {string} [oldEmailCode] 旧邮箱的验证码
     *
     * @example
     *
     * authenticationClient.updateEmail('test@example.com', '1234') // 关闭了“验证原有邮箱“选项
     *
     * @example
     *
     * authenticationClient.updateEmail('test@example.com', '1234', 'test2@example.com', '1234') // 开启了“验证原有邮箱“选项
     *
     *
     * @returns {Promise<User>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.updateEmail = function (email, emailCode, oldEmail, oldEmailCode) {
        return __awaiter(this, void 0, void 0, function () {
            var user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, updateEmail(this.graphqlClient, this.tokenProvider, {
                            email: email,
                            emailCode: emailCode,
                            oldEmail: oldEmail,
                            oldEmailCode: oldEmailCode
                        })];
                    case 1:
                        user = (_a.sent()).updateEmail;
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * @name refreshToken
     * @name_zh 刷新当前用户的 token
     * @description 刷新当前用户的 token，调用此接口要求先登录。
     *
     * @example
     *
     * authenticationClient.updateEmail()
     *
     * @returns {Promise<RefreshToken>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.refreshToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, refreshToken(this.graphqlClient, this.tokenProvider, {})];
                    case 1:
                        data = (_a.sent()).refreshToken;
                        this.setToken(data.token);
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * @name linkAccount
     * @name_zh 关联账号
     * @description 将社交账号绑定到主账号（手机号、邮箱账号）。
     *
     * @param {Object} options
     * @param {string} options.primaryUserToken 主账号 Token
     * @param {string} options.secondaryUserToken 社交账号 Token
     *
     * @example
     *
     * authenticationClient.linkAccount({ primaryUserToken: '', secondaryUserToken: '' })
     *
     * @returns {{code: 200, message: "绑定成功"}}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.linkAccount = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpClient.request({
                            method: 'POST',
                            url: this.baseClient.appHost + "/api/v2/users/link",
                            data: {
                                primaryUserToken: options.primaryUserToken,
                                secondaryUserToken: options.secondaryUserToken
                            }
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, { code: 200, message: '绑定成功' }];
                }
            });
        });
    };
    /**
     * @name bindPhone
     * @name_zh 绑定手机号
     * @description 用户初次绑定手机号，如果需要修改手机号请使用 updatePhone 接口。
     *
     * @param {string} phone
     * @param {string} phoneCode
     *
     * @example
     *
     * authenticationClient.bindPhone('176xxxx7041', '1234')
     *
     * @returns {Promise<User>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.bindPhone = function (phone, phoneCode) {
        return __awaiter(this, void 0, void 0, function () {
            var user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, bindPhone(this.graphqlClient, this.tokenProvider, {
                            phone: phone,
                            phoneCode: phoneCode
                        })];
                    case 1:
                        user = (_a.sent()).bindPhone;
                        this.setCurrentUser(user);
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * @name unbindPhone
     * @name_zh 解绑手机号
     * @description 用户解绑手机号
     *
     * @example
     *
     * authenticationClient.unbindPhone()
     *
     * @returns {Promise<User>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.unbindPhone = function () {
        return __awaiter(this, void 0, void 0, function () {
            var user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, unbindPhone(this.graphqlClient, this.tokenProvider, {})];
                    case 1:
                        user = (_a.sent()).unbindPhone;
                        this.setCurrentUser(user);
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * @name bindEmail
     * @name_zh 绑定邮箱号
     * @description 用户邮箱号
     *
     * @param {string} email
     * @param {string} emailCode
     *
     * @example
     *
     * authenticationClient.bindEmail('test@example.com', '1234')
     *
     * @returns {Promise<User>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.bindEmail = function (email, emailCode) {
        return __awaiter(this, void 0, void 0, function () {
            var user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, bindEmail(this.graphqlClient, this.tokenProvider, {
                            email: email,
                            emailCode: emailCode
                        })];
                    case 1:
                        user = (_a.sent()).bindEmail;
                        this.setCurrentUser(user);
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * @name unbindEmail
     * @name_zh 解绑邮箱号
     * @description 用户解绑邮箱号
     *
     * @example
     *
     * authenticationClient.unbindPhone()
     *
     * @returns {Promise<User>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.unbindEmail = function () {
        return __awaiter(this, void 0, void 0, function () {
            var user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, unbindEmail(this.graphqlClient, this.tokenProvider, {})];
                    case 1:
                        user = (_a.sent()).unbindEmail;
                        this.setCurrentUser(user);
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * @name getCurrentUser
     * @name_zh 获取当前登录的用户信息
     * @description 获取当前登录的用户信息
     *
     * @example
     *
     * authenticationClient.getCurrentUser()
     *
     * @returns {Promise<User>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.getCurrentUser = function () {
        return __awaiter(this, void 0, void 0, function () {
            var data, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, user(this.graphqlClient, this.tokenProvider, {})];
                    case 1:
                        data = (_b.sent()).user;
                        this.setCurrentUser(data);
                        return [2 /*return*/, data];
                    case 2:
                        _a = _b.sent();
                        return [2 /*return*/, null];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @name logout
     * @name_zh 退出登录
     * @description 退出登录，清空 localStorage 里的 user 和 token
     *
     * @example
     *
     * authenticationClient.logout()
     *
     * @returns {null}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.logout = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpClient.request({
                            method: 'GET',
                            url: this.baseClient.appHost + "/api/v2/logout?app_id=" + this.options.appId,
                            withCredentials: true
                        })];
                    case 1:
                        _a.sent();
                        this.tokenProvider.clearUser();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @name listUdv
     * @name_zh 获取当前用户的自定义数据列表
     * @description 获取当前用户的自定义数据列表
     *
     * @example
     *
     * authenticationClient.listUdv()
     *
     * @returns {Promise<Array<UserDefinedData>>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.listUdv = function () {
        return __awaiter(this, void 0, void 0, function () {
            var userId, list;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = this.checkLoggedIn();
                        return [4 /*yield*/, udv(this.graphqlClient, this.tokenProvider, {
                                targetType: UdfTargetType.User,
                                targetId: userId
                            })];
                    case 1:
                        list = (_a.sent()).udv;
                        return [2 /*return*/, convertUdv(list)];
                }
            });
        });
    };
    /**
     * @name setUdv
     * @name_zh 添加自定义数据
     * @description 添加自定义数据
     *
     * @param {string} key 自定义字段的 key
     * @param {any} value 自定义数据的值，值的类型必须要和用户池定义的自定义字段类型一致。
     *
     * @example
     *
     * authenticationClient.setUdv('school', '清华大学') // 要求用户必须定义了 school 这个字段。
     *
     * @returns {Promise<Array<UserDefinedData>>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.setUdv = function (key, value) {
        return __awaiter(this, void 0, void 0, function () {
            var userId, list;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = this.checkLoggedIn();
                        value = JSON.stringify(value);
                        return [4 /*yield*/, setUdv(this.graphqlClient, this.tokenProvider, {
                                targetType: UdfTargetType.User,
                                targetId: userId,
                                key: key,
                                value: value
                            })];
                    case 1:
                        list = (_a.sent()).setUdv;
                        return [2 /*return*/, convertUdv(list)];
                }
            });
        });
    };
    /**
     * @name removeUdv
     * @name_zh 删除自定义数据
     * @description 删除自定义数据
     *
     * @param key 自定义字段的 key
     *
     * @example
     *
     * authenticationClient.removeUdv('school')
     *
     *
     * @returns {Promise<Array<UserDefinedData>>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.removeUdv = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var userId, list;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = this.checkLoggedIn();
                        return [4 /*yield*/, removeUdv(this.graphqlClient, this.tokenProvider, {
                                targetType: UdfTargetType.User,
                                targetId: userId,
                                key: key
                            })];
                    case 1:
                        list = (_a.sent()).removeUdv;
                        return [2 /*return*/, convertUdv(list)];
                }
            });
        });
    };
    /**
     * @name listOrg
     * @name_zh 获取用户所在组织机构
     * @description 获取用户所在的组织机构立碑，以及他所属的节点在此组织机构内的完整路径。
     *
     * @example
     *
     * const data = await authenticationClient.listOrgs();
     *
     * @returns {Promise<UserOrgList>}
     *
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.listOrgs = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpClient.request({
                            method: 'GET',
                            url: this.baseClient.appHost + "/api/v2/users/me/orgs"
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @name loginByLdap
     * @name_zh 使用 LDAP 用户名登录
     * @description 使用 LDAP 用户名登录。
     *
     * 如果你的用户池配置了登录失败检测，当同一  IP 下登录多次失败的时候会要求用户输入图形验证码（code 为 2000)。
     *
     * @param {string} username 用户名
     * @param {string} password 密码
     * @param {Object} [options]
     * @param {boolean} [options.autoRegister] 是否自动注册。如果检测到用户不存在，会根据登录账密自动创建一个账号。
     * @param {string} [options.captchaCode] 图形验证码
     * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。
     *
     *
     * @example
     * const authenticationClient = new AuthenticationClient({
     *   userPoolId: '你的用户池 ID',
     *   appId: '应用 ID'
     * })
     *
     * authenticationClient.loginByLdap(
     *  'admin',
     *  'admin',
     * )
     *
     *
     * @returns {Promise<User>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.loginByLdap = function (username, password, options) {
        return __awaiter(this, void 0, void 0, function () {
            var api, user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = options || {};
                        api = this.baseClient.appHost + "/api/v2/ldap/verify-user";
                        return [4 /*yield*/, this.httpClient.request({
                                method: 'POST',
                                url: api,
                                data: {
                                    username: username,
                                    password: password
                                }
                            })];
                    case 1:
                        user = _a.sent();
                        this.setCurrentUser(user);
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * @name loginByAd
     * @name_zh 使用 AD 用户名登录
     * @description 使用 AD 用户名登录。
     *
     * @param {string} username 用户名
     * @param {string} password 密码
     *
     *
     * @example
     * const authenticationClient = new AuthenticationClient({
     *   userPoolId: '你的用户池 ID',
     *   appId: '应用 ID'
     * })
     *
     * authenticationClient.loginByAd(
     *  'admin',
     *  'admin',
     * )
     *
     * @returns {Promise<User>}
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.loginByAd = function (username, password) {
        return __awaiter(this, void 0, void 0, function () {
            var firstLevelDomain, websocketHost, api, user;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        firstLevelDomain = new URL(this.baseClient.appHost).hostname
                            .split('.')
                            .slice(1)
                            .join('.');
                        websocketHost = this.options.websocketHost || "https://ws." + firstLevelDomain;
                        api = websocketHost + "/api/v2/ad/verify-user";
                        return [4 /*yield*/, this.httpClient.request({
                                method: 'POST',
                                url: api,
                                data: {
                                    username: username,
                                    password: password
                                }
                            })];
                    case 1:
                        user = _a.sent();
                        this.setCurrentUser(user);
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * @description 上传图片
     */
    AuthenticationClient.prototype.uploadPhoto = function (cb) {
        var _this = this;
        var inputElem = document.createElement('input');
        inputElem.type = 'file';
        inputElem.accept = 'image/*';
        var authing = this;
        inputElem.onchange = function () {
            var file = inputElem.files[0];
            var formData = new FormData();
            formData.append('file', file);
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function () {
                // 上传成功
                if (this.readyState === 4) {
                    try {
                        var data = JSON.parse(this.responseText);
                        var code = data.code, message = data.message;
                        if (code !== 200) {
                            authing.options.onError(code, message);
                            throw new Error(JSON.stringify({ code: code, message: message }));
                        }
                        var url = data.data.url;
                        cb(url);
                    }
                    catch (error) {
                        var code = 500;
                        var message = "\u4E0A\u4F20\u56FE\u7247\u5931\u8D25, error = " + error.message;
                        authing.options.onError(code, message);
                        throw new Error(JSON.stringify({ code: code, message: message }));
                    }
                }
            };
            xhr.open('POST', _this.baseClient.appHost + "/api/v2/upload?folder=avatar");
            xhr.send(formData);
        };
        inputElem.click();
    };
    /**
     * @description 更新用户头像
     */
    AuthenticationClient.prototype.updateAvatar = function () {
        return __awaiter(this, void 0, void 0, function () {
            var task, src, user;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkLoggedIn();
                        task = new Promise(function (resolve) {
                            _this.uploadPhoto(function (src) {
                                resolve(src);
                            });
                        });
                        return [4 /*yield*/, task];
                    case 1:
                        src = _a.sent();
                        return [4 /*yield*/, this.updateProfile({ photo: src })];
                    case 2:
                        user = _a.sent();
                        this.setCurrentUser(user);
                        return [2 /*return*/, user];
                }
            });
        });
    };
    /**
     * @description 获取当前用户的所有自定义数据
     *
     */
    AuthenticationClient.prototype.getUdfValue = function () {
        return __awaiter(this, void 0, void 0, function () {
            var userId, list;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = this.checkLoggedIn();
                        return [4 /*yield*/, udv(this.graphqlClient, this.tokenProvider, {
                                targetType: UdfTargetType.User,
                                targetId: userId
                            })];
                    case 1:
                        list = (_a.sent()).udv;
                        return [2 /*return*/, convertUdvToKeyValuePair(list)];
                }
            });
        });
    };
    /**
     * @description 设置自定义字段值
     *
     */
    AuthenticationClient.prototype.setUdfValue = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var userId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (Object.keys(data).length === 0) {
                            throw new Error('empty udf value list');
                        }
                        userId = this.checkLoggedIn();
                        return [4 /*yield*/, setUdvBatch(this.graphqlClient, this.tokenProvider, {
                                targetType: UdfTargetType.User,
                                targetId: userId,
                                udvList: Object.keys(data).map(function (key) { return ({
                                    key: key,
                                    value: JSON.stringify(data[key])
                                }); })
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @description 删除用户自定义数据
     */
    AuthenticationClient.prototype.removeUdfValue = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var userId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        userId = this.checkLoggedIn();
                        return [4 /*yield*/, removeUdv(this.graphqlClient, this.tokenProvider, {
                                targetType: UdfTargetType.User,
                                targetId: userId,
                                key: key
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @name getSecurityLevel
     * @name_zh 用户安全等级
     * @description 获取用户的安全等级评分
     *
     * @example
     *
     * const data = await authenticationClient.getSecurityLevel();
     *
     * @returns {Promise<SecurityLevel>}
     *
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.getSecurityLevel = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.httpClient.request({
                            method: 'GET',
                            url: this.baseClient.appHost + "/api/v2/users/me/security-level"
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @description 获取用户被授权的所有资源
     *
     * @param userId
     * @param namespace
     */
    AuthenticationClient.prototype.listAuthorizedResources = function (namespace, options) {
        return __awaiter(this, void 0, void 0, function () {
            var userId, resourceType, user, _a, list, totalCount;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        userId = this.checkLoggedIn();
                        resourceType = (options || {}).resourceType;
                        return [4 /*yield*/, listUserAuthorizedResources(this.graphqlClient, this.tokenProvider, {
                                id: userId,
                                namespace: namespace,
                                resourceType: resourceType
                            })];
                    case 1:
                        user = (_b.sent()).user;
                        if (!user) {
                            throw new Error('用户不存在');
                        }
                        _a = user.authorizedResources, list = _a.list, totalCount = _a.totalCount;
                        list = formatAuthorizedResources(list);
                        return [2 /*return*/, {
                                list: list,
                                totalCount: totalCount
                            }];
                }
            });
        });
    };
    /**
     * @name computedPasswordSecurityLevel
     * @name_zh 计算密码安全等级
     * @description 计算密码安全等级
     *
     * @example
     *
     * const data = authenticationClient.computedPasswordSecurityLevel('xxxxxxxx');
     *
     * @returns {PasswordSecurityLevel}
     *
     * @memberof AuthenticationClient
     */
    AuthenticationClient.prototype.computedPasswordSecurityLevel = function (password) {
        if (typeof password !== 'string') {
            throw 'password must be a `string`';
        }
        var highLevel = new RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[^]{12,}$/g);
        var middleLevel = new RegExp(/^(?=.*[a-zA-Z])(?=.*\d)[^]{8,}$/g);
        if (password.match(highLevel) !== null) {
            return PasswordSecurityLevel.HIGH;
        }
        if (password.match(middleLevel) !== null) {
            return PasswordSecurityLevel.MIDDLE;
        }
        return PasswordSecurityLevel.LOW;
    };
    AuthenticationClient.prototype._generateTokenRequest = function (params) {
        var p = new URLSearchParams(params);
        return p.toString();
    };
    AuthenticationClient.prototype._generateBasicAuthToken = function (appId, secret) {
        var id = appId || this.options.appId;
        var s = secret || this.options.secret;
        var token = 'Basic ' + Buffer.from(id + ':' + s).toString('base64');
        return token;
    };
    AuthenticationClient.prototype._getAccessTokenByCodeWithClientSecretPost = function (code) {
        return __awaiter(this, void 0, void 0, function () {
            var qstr, api, tokenSet;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        qstr = this._generateTokenRequest({
                            client_id: this.options.appId,
                            client_secret: this.options.secret,
                            grant_type: 'authorization_code',
                            code: code,
                            redirect_uri: this.options.redirectUri
                        });
                        api = '';
                        if (this.options.protocol === 'oidc') {
                            api = this.baseClient.appHost + "/oidc/token";
                        }
                        else if (this.options.protocol === 'oauth') {
                            api = this.baseClient.appHost + "/oauth/token";
                        }
                        return [4 /*yield*/, this.naiveHttpClient.request({
                                method: 'POST',
                                url: api,
                                data: qstr,
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded'
                                }
                            })];
                    case 1:
                        tokenSet = _a.sent();
                        return [2 /*return*/, tokenSet];
                }
            });
        });
    };
    AuthenticationClient.prototype._getAccessTokenByCodeWithClientSecretBasic = function (code) {
        return __awaiter(this, void 0, void 0, function () {
            var api, qstr, tokenSet;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        api = '';
                        if (this.options.protocol === 'oidc') {
                            api = this.baseClient.appHost + "/oidc/token";
                        }
                        else if (this.options.protocol === 'oauth') {
                            api = this.baseClient.appHost + "/oauth/token";
                        }
                        qstr = this._generateTokenRequest({
                            grant_type: 'authorization_code',
                            code: code,
                            redirect_uri: this.options.redirectUri
                        });
                        return [4 /*yield*/, this.naiveHttpClient.request({
                                data: qstr,
                                method: 'POST',
                                url: api,
                                headers: {
                                    Authorization: this._generateBasicAuthToken()
                                }
                            })];
                    case 1:
                        tokenSet = _a.sent();
                        return [2 /*return*/, tokenSet];
                }
            });
        });
    };
    AuthenticationClient.prototype._getAccessTokenByCodeWithNone = function (code) {
        return __awaiter(this, void 0, void 0, function () {
            var api, qstr, tokenSet;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        api = '';
                        if (this.options.protocol === 'oidc') {
                            api = this.baseClient.appHost + "/oidc/token";
                        }
                        else if (this.options.protocol === 'oauth') {
                            api = this.baseClient.appHost + "/oauth/token";
                        }
                        qstr = this._generateTokenRequest({
                            client_id: this.options.appId,
                            grant_type: 'authorization_code',
                            code: code,
                            redirect_uri: this.options.redirectUri
                        });
                        return [4 /*yield*/, this.naiveHttpClient.request({
                                method: 'POST',
                                url: api,
                                data: qstr
                            })];
                    case 1:
                        tokenSet = _a.sent();
                        return [2 /*return*/, tokenSet];
                }
            });
        });
    };
    AuthenticationClient.prototype.getAccessTokenByCode = function (code) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!['oauth', 'oidc'].includes(this.options.protocol)) {
                            throw new Error('初始化 AuthenticationClient 时传入的 protocol 参数必须为 oauth 或 oidc，请检查参数');
                        }
                        if (!this.options.secret &&
                            this.options.tokenEndPointAuthMethod !== 'none') {
                            throw new Error('请在初始化 AuthenticationClient 时传入 appId 和 secret 参数');
                        }
                        if (!(this.options.tokenEndPointAuthMethod === 'client_secret_post')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._getAccessTokenByCodeWithClientSecretPost(code)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        if (!(this.options.tokenEndPointAuthMethod === 'client_secret_basic')) return [3 /*break*/, 4];
                        return [4 /*yield*/, this._getAccessTokenByCodeWithClientSecretBasic(code)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        if (!(this.options.tokenEndPointAuthMethod === 'none')) return [3 /*break*/, 6];
                        return [4 /*yield*/, this._getAccessTokenByCodeWithNone(code)];
                    case 5: return [2 /*return*/, _a.sent()];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    AuthenticationClient.prototype.getAccessTokenByClientCredentials = function (scope, options) {
        return __awaiter(this, void 0, void 0, function () {
            var i, s, qstr, api, tokenSet;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!scope) {
                            throw new Error('请传入 scope 参数，请看文档：https://docs.authing.cn/v2/guides/authorization/m2m-authz.html');
                        }
                        if (!options) {
                            throw new Error('请在调用本方法时传入 { accessKey: string, accessSecret: string }，请看文档：https://docs.authing.cn/v2/guides/authorization/m2m-authz.html'
                            // '请在初始化 AuthenticationClient 时传入 appId 和 secret 参数或者在调用本方法时传入 { accessKey: string, accessSecret: string }，请看文档：https://docs.authing.cn/v2/guides/authorization/m2m-authz.html'
                            );
                        }
                        i = (options === null || options === void 0 ? void 0 : options.accessKey) || this.options.appId;
                        s = (options === null || options === void 0 ? void 0 : options.accessSecret) || this.options.secret;
                        qstr = this._generateTokenRequest({
                            client_id: i,
                            client_secret: s,
                            grant_type: 'client_credentials',
                            scope: scope
                        });
                        api = '';
                        if (this.options.protocol === 'oidc') {
                            api = this.baseClient.appHost + "/oidc/token";
                        }
                        else if (this.options.protocol === 'oauth') {
                            api = this.baseClient.appHost + "/oauth/token";
                        }
                        return [4 /*yield*/, this.naiveHttpClient.request({
                                method: 'POST',
                                url: api,
                                data: qstr,
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded'
                                }
                            })];
                    case 1:
                        tokenSet = _a.sent();
                        return [2 /*return*/, tokenSet];
                }
            });
        });
    };
    AuthenticationClient.prototype.getUserInfoByAccessToken = function (accessToken) {
        return __awaiter(this, void 0, void 0, function () {
            var api, userInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        api = '';
                        if (this.options.protocol === 'oidc') {
                            api = this.baseClient.appHost + "/oidc/me";
                        }
                        else if (this.options.protocol === 'oauth') {
                            api = this.baseClient.appHost + "/oauth/me";
                        }
                        return [4 /*yield*/, this.naiveHttpClient.request({
                                method: 'POST',
                                url: api,
                                headers: {
                                    Authorization: 'Bearer ' + accessToken
                                }
                            })];
                    case 1:
                        userInfo = _a.sent();
                        return [2 /*return*/, userInfo];
                }
            });
        });
    };
    AuthenticationClient.prototype.buildAuthorizeUrl = function (options) {
        if (!this.baseClient.appHost) {
            throw new Error('请在初始化 AuthenticationClient 时传入应用域名 appHost 参数，形如：https://app1.authing.cn');
        }
        if (this.options.protocol === 'oidc') {
            return this._buildOidcAuthorizeUrl(options);
        }
        if (this.options.protocol === 'oauth') {
            return this._buildOauthAuthorizeUrl(options);
        }
        if (this.options.protocol === 'saml') {
            return this._buildSamlAuthorizeUrl();
        }
        if (this.options.protocol === 'cas') {
            return this._buildCasAuthorizeUrl(options);
        }
        throw new Error('不支持的协议类型，请在初始化 AuthenticationClient 时传入 protocol 参数，可选值为 oidc、oauth、saml、cas');
    };
    AuthenticationClient.prototype._buildOidcAuthorizeUrl = function (options) {
        var map = {
            appId: 'client_id',
            scope: 'scope',
            state: 'state',
            nonce: 'nonce',
            responseMode: 'response_mode',
            responseType: 'response_type',
            redirectUri: 'redirect_uri'
        };
        var res = {
            nonce: Math.random()
                .toString()
                .slice(2),
            state: Math.random()
                .toString()
                .slice(2),
            scope: 'openid profile email phone address',
            client_id: this.options.appId,
            response_mode: 'query',
            redirect_uri: this.options.redirectUri,
            response_type: 'code'
        };
        Object.keys(map).forEach(function (k) {
            if (options && options[k]) {
                if (k === 'scope' && options.scope.includes('offline_access')) {
                    res.prompt = 'consent';
                }
                res[map[k]] = options[k];
            }
        });
        var params = new URLSearchParams(res);
        var authorizeUrl = this.baseClient.appHost + '/oidc/auth?' + params.toString();
        return authorizeUrl;
    };
    AuthenticationClient.prototype._buildOauthAuthorizeUrl = function (options) {
        var map = {
            appId: 'client_id',
            scope: 'scope',
            state: 'state',
            responseType: 'response_type',
            redirectUri: 'redirect_uri'
        };
        var res = {
            state: Math.random()
                .toString()
                .slice(2),
            scope: 'user',
            client_id: this.options.appId,
            redirect_uri: this.options.redirectUri,
            response_type: 'code'
        };
        Object.keys(map).forEach(function (k) {
            if (options && options[k]) {
                res[map[k]] = options[k];
            }
        });
        var params = new URLSearchParams(res);
        var authorizeUrl = this.baseClient.appHost + '/oauth/auth?' + params.toString();
        return authorizeUrl;
    };
    AuthenticationClient.prototype._buildSamlAuthorizeUrl = function () {
        return this.baseClient.appHost + '/saml-idp/' + this.options.appId;
    };
    AuthenticationClient.prototype._buildCasAuthorizeUrl = function (options) {
        if (options === null || options === void 0 ? void 0 : options.service) {
            return this.baseClient.appHost + "/cas-idp/" + this.options.appId + "?service=" + (options === null || options === void 0 ? void 0 : options.service);
        }
        return this.baseClient.appHost + "/cas-idp/" + this.options.appId;
    };
    AuthenticationClient.prototype._buildCasLogoutUrl = function (options) {
        if (options === null || options === void 0 ? void 0 : options.redirectUri) {
            return (this.baseClient.appHost + '/cas-idp/logout?url=' + options.redirectUri);
        }
        return this.baseClient.appHost + "/cas-idp/logout";
    };
    AuthenticationClient.prototype._buildOidcLogoutUrl = function (options) {
        if (options && !(options.idToken && options.redirectUri)) {
            throw new Error('必须同时传入 idToken 和 redirectUri 参数，或者同时都不传入');
        }
        if (options === null || options === void 0 ? void 0 : options.redirectUri) {
            return this.baseClient.appHost + "/oidc/session/end?id_token_hint=" + options.idToken + "&post_logout_redirect_uri=" + options.redirectUri;
        }
        return this.baseClient.appHost + "/oidc/session/end";
    };
    AuthenticationClient.prototype._buildEasyLogoutUrl = function (options) {
        if (options === null || options === void 0 ? void 0 : options.redirectUri) {
            return this.baseClient.appHost + "/login/profile/logout?redirect_uri=" + options.redirectUri;
        }
        return this.baseClient.appHost + "/login/profile/logout";
    };
    AuthenticationClient.prototype.buildLogoutUrl = function (options) {
        if (this.options.protocol === 'cas') {
            return this._buildCasLogoutUrl(options);
        }
        if (this.options.protocol === 'oidc' && (options === null || options === void 0 ? void 0 : options.expert)) {
            return this._buildOidcLogoutUrl(options);
        }
        return this._buildEasyLogoutUrl(options);
    };
    AuthenticationClient.prototype._getNewAccessTokenByRefreshTokenWithClientSecretPost = function (refreshToken) {
        return __awaiter(this, void 0, void 0, function () {
            var qstr, api, tokenSet;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        qstr = this._generateTokenRequest({
                            client_id: this.options.appId,
                            client_secret: this.options.secret,
                            grant_type: 'refresh_token',
                            refresh_token: refreshToken
                        });
                        api = '';
                        if (this.options.protocol === 'oidc') {
                            api = this.baseClient.appHost + "/oidc/token";
                        }
                        else if (this.options.protocol === 'oauth') {
                            api = this.baseClient.appHost + "/oauth/token";
                        }
                        return [4 /*yield*/, this.naiveHttpClient.request({
                                method: 'POST',
                                url: api,
                                data: qstr,
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded'
                                }
                            })];
                    case 1:
                        tokenSet = _a.sent();
                        return [2 /*return*/, tokenSet];
                }
            });
        });
    };
    AuthenticationClient.prototype._getNewAccessTokenByRefreshTokenWithClientSecretBasic = function (refreshToken) {
        return __awaiter(this, void 0, void 0, function () {
            var api, qstr, tokenSet;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        api = '';
                        if (this.options.protocol === 'oidc') {
                            api = this.baseClient.appHost + "/oidc/token";
                        }
                        else if (this.options.protocol === 'oauth') {
                            api = this.baseClient.appHost + "/oauth/token";
                        }
                        qstr = this._generateTokenRequest({
                            grant_type: 'refresh_token',
                            refresh_token: refreshToken
                        });
                        return [4 /*yield*/, this.naiveHttpClient.request({
                                data: qstr,
                                method: 'POST',
                                url: api,
                                headers: {
                                    Authorization: this._generateBasicAuthToken()
                                }
                            })];
                    case 1:
                        tokenSet = _a.sent();
                        return [2 /*return*/, tokenSet];
                }
            });
        });
    };
    AuthenticationClient.prototype._getNewAccessTokenByRefreshTokenWithNone = function (refreshToken) {
        return __awaiter(this, void 0, void 0, function () {
            var api, qstr, tokenSet;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        api = '';
                        if (this.options.protocol === 'oidc') {
                            api = this.baseClient.appHost + "/oidc/token";
                        }
                        else if (this.options.protocol === 'oauth') {
                            api = this.baseClient.appHost + "/oauth/token";
                        }
                        qstr = this._generateTokenRequest({
                            client_id: this.options.appId,
                            grant_type: 'refresh_token',
                            refresh_token: refreshToken
                        });
                        return [4 /*yield*/, this.naiveHttpClient.request({
                                method: 'POST',
                                url: api,
                                data: qstr
                            })];
                    case 1:
                        tokenSet = _a.sent();
                        return [2 /*return*/, tokenSet];
                }
            });
        });
    };
    AuthenticationClient.prototype.getNewAccessTokenByRefreshToken = function (refreshToken) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!['oauth', 'oidc'].includes(this.options.protocol)) {
                            throw new Error('初始化 AuthenticationClient 时传入的 protocol 参数必须为 oauth 或 oidc，请检查参数');
                        }
                        if (!this.options.secret &&
                            this.options.tokenEndPointAuthMethod !== 'none') {
                            throw new Error('请在初始化 AuthenticationClient 时传入 appId 和 secret 参数');
                        }
                        if (!(this.options.tokenEndPointAuthMethod === 'client_secret_post')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._getNewAccessTokenByRefreshTokenWithClientSecretPost(refreshToken)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        if (!(this.options.tokenEndPointAuthMethod === 'client_secret_basic')) return [3 /*break*/, 4];
                        return [4 /*yield*/, this._getNewAccessTokenByRefreshTokenWithClientSecretBasic(refreshToken)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        if (!(this.options.tokenEndPointAuthMethod === 'none')) return [3 /*break*/, 6];
                        return [4 /*yield*/, this._getNewAccessTokenByRefreshTokenWithNone(refreshToken)];
                    case 5: return [2 /*return*/, _a.sent()];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    AuthenticationClient.prototype._revokeTokenWithClientSecretPost = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var qstr, api, tokenSet;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        qstr = this._generateTokenRequest({
                            client_id: this.options.appId,
                            client_secret: this.options.secret,
                            token: token
                        });
                        api = '';
                        if (this.options.protocol === 'oidc') {
                            api = this.baseClient.appHost + "/oidc/token/revocation";
                        }
                        else if (this.options.protocol === 'oauth') {
                            api = this.baseClient.appHost + "/oauth/token/revocation";
                        }
                        return [4 /*yield*/, this.naiveHttpClient.request({
                                method: 'POST',
                                url: api,
                                data: qstr,
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded'
                                }
                            })];
                    case 1:
                        tokenSet = _a.sent();
                        return [2 /*return*/, tokenSet];
                }
            });
        });
    };
    AuthenticationClient.prototype._revokeTokenWithClientSecretBasic = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var api, qstr, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        api = '';
                        if (this.options.protocol === 'oidc') {
                            api = this.baseClient.appHost + "/oidc/token/revocation";
                        }
                        else if (this.options.protocol === 'oauth') {
                            throw new Error('OAuth 2.0 暂不支持用 client_secret_basic 模式身份验证撤回 Token');
                            api = this.baseClient.appHost + "/oauth/token/revocation";
                        }
                        qstr = this._generateTokenRequest({
                            token: token
                        });
                        return [4 /*yield*/, this.naiveHttpClient.request({
                                data: qstr,
                                method: 'POST',
                                url: api,
                                headers: {
                                    Authorization: this._generateBasicAuthToken()
                                }
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    AuthenticationClient.prototype._revokeTokenWithNone = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var api, qstr, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        api = '';
                        if (this.options.protocol === 'oidc') {
                            api = this.baseClient.appHost + "/oidc/token/revocation";
                        }
                        else if (this.options.protocol === 'oauth') {
                            api = this.baseClient.appHost + "/oauth/token/revocation";
                        }
                        qstr = this._generateTokenRequest({
                            client_id: this.options.appId,
                            token: token
                        });
                        return [4 /*yield*/, this.naiveHttpClient.request({
                                method: 'POST',
                                url: api,
                                data: qstr
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    AuthenticationClient.prototype.revokeToken = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!['oauth', 'oidc'].includes(this.options.protocol)) {
                            throw new Error('初始化 AuthenticationClient 时传入的 protocol 参数必须为 oauth 或 oidc，请检查参数');
                        }
                        if (!this.options.secret &&
                            this.options.revocationEndPointAuthMethod !== 'none') {
                            throw new Error('请在初始化 AuthenticationClient 时传入 appId 和 secret 参数');
                        }
                        if (!(this.options.revocationEndPointAuthMethod === 'client_secret_post')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._revokeTokenWithClientSecretPost(token)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 2:
                        if (!(this.options.revocationEndPointAuthMethod === 'client_secret_basic')) return [3 /*break*/, 4];
                        return [4 /*yield*/, this._revokeTokenWithClientSecretBasic(token)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 4:
                        if (!(this.options.revocationEndPointAuthMethod === 'none')) return [3 /*break*/, 6];
                        return [4 /*yield*/, this._revokeTokenWithNone(token)];
                    case 5:
                        _a.sent();
                        return [2 /*return*/, true];
                    case 6: throw new Error('初始化 AuthenticationClient 时传入的 revocationEndPointAuthMethod 参数可选值为 client_secret_base、client_secret_post、none，请检查参数');
                }
            });
        });
    };
    AuthenticationClient.prototype._introspectTokenWithClientSecretPost = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var qstr, api, tokenSet;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        qstr = this._generateTokenRequest({
                            client_id: this.options.appId,
                            client_secret: this.options.secret,
                            token: token
                        });
                        api = '';
                        if (this.options.protocol === 'oidc') {
                            api = this.baseClient.appHost + "/oidc/token/introspection";
                        }
                        else if (this.options.protocol === 'oauth') {
                            api = this.baseClient.appHost + "/oauth/token/introspection";
                        }
                        return [4 /*yield*/, this.naiveHttpClient.request({
                                method: 'POST',
                                url: api,
                                data: qstr,
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded'
                                }
                            })];
                    case 1:
                        tokenSet = _a.sent();
                        return [2 /*return*/, tokenSet];
                }
            });
        });
    };
    AuthenticationClient.prototype._introspectTokenWithClientSecretBasic = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var api, qstr, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        api = '';
                        if (this.options.protocol === 'oidc') {
                            api = this.baseClient.appHost + "/oidc/token/introspection";
                        }
                        else if (this.options.protocol === 'oauth') {
                            api = this.baseClient.appHost + "/oauth/token/introspection";
                        }
                        qstr = this._generateTokenRequest({
                            token: token
                        });
                        return [4 /*yield*/, this.naiveHttpClient.request({
                                data: qstr,
                                method: 'POST',
                                url: api,
                                headers: {
                                    Authorization: this._generateBasicAuthToken()
                                }
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    AuthenticationClient.prototype._introspectTokenWithNone = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var api, qstr, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        api = '';
                        if (this.options.protocol === 'oidc') {
                            api = this.baseClient.appHost + "/oidc/token/introspection";
                        }
                        else if (this.options.protocol === 'oauth') {
                            api = this.baseClient.appHost + "/oauth/token/introspection";
                        }
                        qstr = this._generateTokenRequest({
                            client_id: this.options.appId,
                            token: token
                        });
                        return [4 /*yield*/, this.naiveHttpClient.request({
                                method: 'POST',
                                url: api,
                                data: qstr
                            })];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    AuthenticationClient.prototype.introspectToken = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!['oauth', 'oidc'].includes(this.options.protocol)) {
                            throw new Error('初始化 AuthenticationClient 时传入的 protocol 参数必须为 oauth 或 oidc，请检查参数');
                        }
                        if (!this.options.secret &&
                            this.options.introspectionEndPointAuthMethod !== 'none') {
                            throw new Error('请在初始化 AuthenticationClient 时传入 appId 和 secret 参数');
                        }
                        if (!(this.options.introspectionEndPointAuthMethod === 'client_secret_post')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._introspectTokenWithClientSecretPost(token)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        if (!(this.options.introspectionEndPointAuthMethod === 'client_secret_basic')) return [3 /*break*/, 4];
                        return [4 /*yield*/, this._introspectTokenWithClientSecretBasic(token)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4:
                        if (!(this.options.introspectionEndPointAuthMethod === 'none')) return [3 /*break*/, 6];
                        return [4 /*yield*/, this._introspectTokenWithNone(token)];
                    case 5: return [2 /*return*/, _a.sent()];
                    case 6: throw new Error('初始化 AuthenticationClient 时传入的 introspectionEndPointAuthMethod 参数可选值为 client_secret_base、client_secret_post、none，请检查参数');
                }
            });
        });
    };
    AuthenticationClient.prototype.validateTicketV1 = function (ticket, service) {
        return __awaiter(this, void 0, void 0, function () {
            var api, result, _a, valid, username;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        api = this.baseClient.appHost + "/cas-idp/" + this.options.appId + "/validate";
                        return [4 /*yield*/, this.naiveHttpClient.request({
                                method: 'GET',
                                url: api,
                                params: {
                                    service: service,
                                    ticket: ticket
                                }
                            })];
                    case 1:
                        result = _b.sent();
                        _a = result.split('\n'), valid = _a[0], username = _a[1];
                        return [2 /*return*/, __assign(__assign({ valid: valid === 'yes' }, (username && { username: username })), (valid !== 'yes' && { message: 'ticket 不合法' }))];
                }
            });
        });
    };
    return AuthenticationClient;
}());
export { AuthenticationClient };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aGVudGljYXRpb25DbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2F1dGhlbnRpY2F0aW9uL0F1dGhlbnRpY2F0aW9uQ2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDNUUsT0FBTyxFQUNMLFNBQVMsRUFDVCxTQUFTLEVBQ1QsZ0JBQWdCLEVBQ2hCLHFCQUFxQixFQUNyQiwyQkFBMkIsRUFDM0IsWUFBWSxFQUNaLGdCQUFnQixFQUNoQixvQkFBb0IsRUFDcEIsaUJBQWlCLEVBQ2pCLGVBQWUsRUFDZixZQUFZLEVBQ1osZUFBZSxFQUNmLG1CQUFtQixFQUNuQixrQkFBa0IsRUFDbEIsU0FBUyxFQUNULGFBQWEsRUFDYixTQUFTLEVBQ1QsTUFBTSxFQUNOLFdBQVcsRUFDWCxHQUFHLEVBQ0gsV0FBVyxFQUNYLFdBQVcsRUFDWCxXQUFXLEVBQ1gsY0FBYyxFQUNkLFdBQVcsRUFDWCxVQUFVLEVBQ1YsSUFBSSxFQUNMLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxPQUFPLEVBTUwscUJBQXFCLEVBRXRCLE1BQU0sU0FBUyxDQUFDO0FBQ2pCLE9BQU8sRUFTTCxhQUFhLEVBSWQsTUFBTSx3QkFBd0IsQ0FBQztBQUNoQyxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUMxRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ25FLE9BQU8sRUFDTCxVQUFVLEVBQ1Ysd0JBQXdCLEVBQ3hCLE9BQU8sRUFDUCx5QkFB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