var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./BaseAuthenticationClient"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MfaAuthenticationClient = void 0;
    var BaseAuthenticationClient_1 = require("./BaseAuthenticationClient");
    /**
     * @class MfaAuthenticationClient 多因素认证模块
     * @description 此模块用于进行绑定 MFA 认证器、解绑 MFA 认证器、用户二次认证。
     *
     * 请求绑定 MFA 认证器：
     *
     * \`\`\`javascript
     * import { AuthenticationClient } from "authing-js-sdk"
     * const authenticationClient = new AuthenticationClient({
     *    appId: "YOUR_APP_ID",
     * })
     * await authenticationClient.mfa.assosicateMfaAuthenticator({authenticatorType: 'totp'})
     * \`\`\`
     *
     * 验证 MFA 二次口令：
     *
     * \`\`\`javascript
     * import { AuthenticationClient } from "authing-js-sdk"
     * const authenticationClient = new AuthenticationClient({
     *    appId: "YOUR_APP_ID",
     * })
     * await authenticationClient.mfa.verifyTotpMfa({totp: '112233', mfaToken: 'xxx'})
     * \`\`\`
     *
     * @name MfaAuthenticationClient
     */
    var MfaAuthenticationClient = /** @class */ (function () {
        function MfaAuthenticationClient(options, tokenProvider, httpClient) {
            this.options = options;
            this.tokenProvider = tokenProvider;
            this.httpClient = httpClient;
            this.baseClient = new BaseAuthenticationClient_1.BaseAuthenticationClient(options);
        }
        /**
         * @name getMfaAuthenticators
         * @name_zh 获取 MFA 认证器
         * @description 获取 MFA 认证器
         *
         * @example
         * const authenticationClient = new AuthenticationClient({
         *    appId: "YOUR_APP_ID",
         * })
         * const authenticators = await authenticationClient.mfa.getMfaAuthenticators({ type: 'totp' })
         *
         * @returns {Promise<IMfaAuthenticators>}
         * @memberof MfaAuthenticationClient
         */
        MfaAuthenticationClient.prototype.getMfaAuthenticators = function (options) {
            if (options === void 0) { options = { type: 'totp' }; }
            return __awaiter(this, void 0, void 0, function () {
                var api, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            api = this.baseClient.appHost + "/api/v2/mfa/authenticator";
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'GET',
                                    url: api,
                                    params: {
                                        type: options.type
                                    }
                                })];
                        case 1:
                            data = _a.sent();
                            console.log(data);
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        /**
         * @name assosicateMfaAuthenticator
         * @name_zh 请求 MFA 二维码和密钥信息
         * @description 请求 MFA 二维码和密钥信息
         *
         * @example
         * const authenticationClient = new AuthenticationClient({
         *    appId: "YOUR_APP_ID",
         * })
         * const authenticators = await authenticationClient.mfa.assosicateMfaAuthenticator({ authenticatorType: 'totp' })
         *
         * @returns {Promise<IMfaAssociation>}
         * @memberof MfaAuthenticationClient
         */
        MfaAuthenticationClient.prototype.assosicateMfaAuthenticator = function (options) {
            if (options === void 0) { options = { authenticatorType: 'totp' }; }
            return __awaiter(this, void 0, void 0, function () {
                var api, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            api = this.baseClient.appHost + "/api/v2/mfa/totp/associate";
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'POST',
                                    url: api,
                                    data: {
                                        authenticator_type: options.authenticatorType
                                    }
                                })];
                        case 1:
                            data = _a.sent();
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        /**
         * @name deleteMfaAuthenticator
         * @name_zh 解绑 MFA
         * @description 解绑 MFA
         *
         * @example
         * const authenticationClient = new AuthenticationClient({
         *    appId: "YOUR_APP_ID",
         * })
         * const authenticators = await authenticationClient.mfa.deleteMfaAuthenticator()
         *
         * @returns {Promise<IMfaDeleteAssociation>}
         * @memberof MfaAuthenticationClient
         */
        MfaAuthenticationClient.prototype.deleteMfaAuthenticator = function () {
            return __awaiter(this, void 0, void 0, function () {
                var api;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            api = this.baseClient.appHost + "/api/v2/mfa/totp/associate";
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'DELETE',
                                    url: api
                                })];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, {
                                    code: 200,
                                    message: 'TOTP MFA 解绑成功'
                                }];
                    }
                });
            });
        };
        /**
         * @name confirmAssosicateMfaAuthenticator
         * @name_zh 确认绑定 MFA
         * @description 确认绑定 MFA
         *
         * @example
         * const authenticationClient = new AuthenticationClient({
         *    appId: "YOUR_APP_ID",
         * })
         * const authenticators = await authenticationClient.mfa.confirmAssosicateMfaAuthenticator({ authenticatorType: 'totp', totp: '112233' })
         *
         * @returns {Promise<IMfaConfirmAssociation>}
         * @memberof MfaAuthenticationClient
         */
        MfaAuthenticationClient.prototype.confirmAssosicateMfaAuthenticator = function (options) {
            if (options === void 0) { options = { authenticatorType: 'totp' }; }
            return __awaiter(this, void 0, void 0, function () {
                var api;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            api = this.baseClient.appHost + "/api/v2/mfa/totp/associate/confirm";
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'POST',
                                    url: api,
                                    data: {
                                        authenticator_type: options.authenticatorType,
                                        totp: options.totp
                                    }
                                })];
                        case 1:
                            _a.sent();
                            return [2 /*return*/, { code: 200, message: 'TOTP MFA 绑定成功' }];
                    }
                });
            });
        };
        /**
         * @name verifyTotpMfa
         * @name_zh 检验二次验证 MFA 口令
         * @description 检验二次验证 MFA 口令
         *
         * @example
         * const authenticationClient = new AuthenticationClient({
         *    appId: "YOUR_APP_ID",
         * })
         * const authenticators = await authenticationClient.mfa.verifyTotpMfa({ authenticatorType: 'totp', totp: '112233' })
         *
         * @returns {Promise<User>}
         * @memberof MfaAuthenticationClient
         */
        MfaAuthenticationClient.prototype.verifyTotpMfa = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var api, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            api = this.baseClient.appHost + "/api/v2/mfa/totp/verify";
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'POST',
                                    url: api,
                                    data: {
                                        totp: options.totp
                                    },
                                    headers: {
                                        authorization: 'Bearer ' + options.mfaToken
                                    }
                                })];
                        case 1:
                            data = _a.sent();
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        /**
         * @name verifyAppSmsMfa
         * @name_zh 检验二次验证 MFA 短信验证码
         * @description 检验二次验证 MFA 短信验证码
         *
         * @param {object} options
         * @param {string} options.phone 用户手机号
         * @param {string} options.code 手机验证码
         * @param {string} options.token 登录接口返回的 mfaToken
         *
         * @example
         * const authenticationClient = new AuthenticationClient({
         *    appId: "YOUR_APP_ID",
         * })
         * const authenticators = await authenticationClient.mfa.verifySmsMfa({ mfaToken: 'xxxxxx', phone: '173xxxxxxxx' })
         *
         * @returns {Promise<User>}
         * @memberof MfaAuthenticationClient
         */
        MfaAuthenticationClient.prototype.verifyAppSmsMfa = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var api, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            api = this.baseClient.appHost + "/api/v2/applications/mfa/sms/verify";
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'POST',
                                    url: api,
                                    data: {
                                        phone: options.phone,
                                        code: options.code
                                    },
                                    headers: {
                                        authorization: 'Bearer ' + options.mfaToken
                                    }
                                })];
                        case 1:
                            data = _a.sent();
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        /**
         * @name verifyAppEmailMfa
         * @name_zh 检验二次验证 MFA 邮箱验证码
         * @description 检验二次验证 MFA 邮箱验证码
         *
         * @param {object} options
         * @param {string} options.email 用户邮箱
         * @param {string} options.code 邮箱验证码
         * @param {string} options.token 登录接口返回的 mfaToken
         *
         * @example
         * const authenticationClient = new AuthenticationClient({
         *    appId: "YOUR_APP_ID",
         * })
         * const authenticators = await authenticationClient.mfa.verifyAppEmailMfa({ mfaToken: 'xxxx', email: 'example@authing.com' })
         *
         * @returns {Promise<User>}
         * @memberof MfaAuthenticationClient
         */
        MfaAuthenticationClient.prototype.verifyAppEmailMfa = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var api, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            api = this.baseClient.appHost + "/api/v2/applications/mfa/email/verify";
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'POST',
                                    url: api,
                                    data: {
                                        email: options.email,
                                        code: options.code
                                    },
                                    headers: {
                                        authorization: 'Bearer ' + options.mfaToken
                                    }
                                })];
                        case 1:
                            data = _a.sent();
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        /**
         * @name phoneOrEmailBindable
         * @name_zh 检测手机号或邮箱是否已被绑定
         * @description 当需要手机或邮箱 MFA 登录，而用户未绑定手机或邮箱时，可先让用户输入手机号或邮箱，用此接口先检测手机或邮箱是否可绑定，再进行 MFA 验证
         *
         * @param {object} options
         * @param {string} [options.mfaToken] 后端返回的 mfaToken
         * @param {string} [options.phone] 需要检测的手机号
         * @param {string} [options.email] 需要检测的邮箱
         *
         * @example
         *
         * authenticationClient.phoneOrEmailBindable({
         *  phone: '173xxxxxxxx',
         *  mfaToken: 'xxxxx'
         * })
         *
         * @returns {Promise<boolean>}
         * @memberof MfaAuthenticationClient
         */
        MfaAuthenticationClient.prototype.phoneOrEmailBindable = function (_a) {
            var phone = _a.phone, email = _a.email, mfaToken = _a.mfaToken;
            return __awaiter(this, void 0, void 0, function () {
                var api;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            api = this.baseClient.appHost + "/api/v2/applications/mfa/check";
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'POST',
                                    url: api,
                                    data: {
                                        email: email,
                                        phone: phone
                                    },
                                    headers: {
                                        authorization: 'Bearer ' + mfaToken
                                    }
                                })];
                        case 1: return [2 /*return*/, _b.sent()];
                    }
                });
            });
        };
        /**
         * @name verifyTotpRecoveryCode
         * @name_zh 检验二次验证 MFA 恢复代码
         * @description 检验二次验证 MFA 恢复代码
         *
         * @example
         * const authenticationClient = new AuthenticationClient({
         *    appId: "YOUR_APP_ID",
         * })
         * const authenticators = await authenticationClient.mfa.verifyTotpRecoveryCode({ authenticatorType: 'totp', totp: '112233' })
         *
         * @returns {Promise<User>}
         * @memberof MfaAuthenticationClient
         */
        MfaAuthenticationClient.prototype.verifyTotpRecoveryCode = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var api, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            api = this.baseClient.appHost + "/api/v2/mfa/totp/recovery";
                            return [4 /*yield*/, this.httpClient.request({
                                    method: 'POST',
                                    url: api,
                                    data: {
                                        recoveryCode: options.recoveryCode
                                    },
                                    headers: {
                                        authorization: 'Bearer ' + options.mfaToken
                                    }
                                })];
                        case 1:
                            data = _a.sent();
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        return MfaAuthenticationClient;
    }());
    exports.MfaAuthenticationClient = MfaAuthenticationClient;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWZhQXV0aGVudGljYXRpb25DbGllbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbGliL2F1dGhlbnRpY2F0aW9uL01mYUF1dGhlbnRpY2F0aW9uQ2xpZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQVVBLHVFQUFzRTtJQUV0RTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXlCRztJQUNIO1FBTUUsaUNBQ0UsT0FBb0MsRUFDcEMsYUFBMEMsRUFDMUMsVUFBc0I7WUFFdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7WUFDdkIsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7WUFDbkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7WUFDN0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLG1EQUF3QixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzFELENBQUM7UUFFRDs7Ozs7Ozs7Ozs7OztXQWFHO1FBQ0csc0RBQW9CLEdBQTFCLFVBQ0UsT0FFb0I7WUFGcEIsd0JBQUEsRUFBQSxZQUVNLElBQUksRUFBRSxNQUFNLEVBQUU7Ozs7Ozs0QkFFZCxHQUFHLEdBQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLDhCQUEyQixDQUFDOzRCQUNqQyxxQkFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztvQ0FDN0QsTUFBTSxFQUFFLEtBQUs7b0NBQ2IsR0FBRyxFQUFFLEdBQUc7b0NBQ1IsTUFBTSxFQUFFO3dDQUNOLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTtxQ0FDbkI7aUNBQ0YsQ0FBQyxFQUFBOzs0QkFOSSxJQUFJLEdBQXVCLFNBTS9COzRCQUNGLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7NEJBQ2xCLHNCQUFPLElBQUksRUFBQzs7OztTQUNiO1FBRUQ7Ozs7Ozs7Ozs7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