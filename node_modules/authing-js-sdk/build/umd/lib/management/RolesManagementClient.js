var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "../../types/graphql.v2", "../graphqlapi", "../utils"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RolesManagementClient = void 0;
    var graphql_v2_1 = require("../../types/graphql.v2");
    var graphqlapi_1 = require("../graphqlapi");
    var utils_1 = require("../utils");
    /**
     * @class RolesManagementClient 管理角色
     * @description 此模块用于管理 Authing 角色，可以进行角色的增删改查、角色添加/删除用户、角色添加/删除策略 等操作。
     *
     * @example
     *
     * 请使用以下方式使用该模块，而不要直接初始化该模块：
     * \`\`\`javascript
     * import { ManagementClient } from "authing-js-sdk"
     * const managementClient = new ManagementClient({
     *    userPoolId: "YOUR_USERPOOL_ID",
     *    secret: "YOUR_USERPOOL_SECRET",
     * })
     * managementClient.roles.list // 获取角色列表
     * managementClient.roles.create // 创建角色
     * managementClient.roles.listUsers // 获取角色用户列表
     * \`\`\`
     *
     * @name RolesManagementClient
     */
    var RolesManagementClient = /** @class */ (function () {
        function RolesManagementClient(options, graphqlClient, tokenProvider) {
            this.options = options;
            this.graphqlClient = graphqlClient;
            this.tokenProvider = tokenProvider;
        }
        /**
         * @name create
         * @name_zh 创建角色
         * @description 创建角色
         *
         * @param {string} code 角色唯一标志符
         * @param {string} [options.description] 描述
         * @param {string} [options.namespace] 该角色所在的 namespace，默认为 default
         *
         * @example
         * managementClient.roles.create('rolea', 'RoleA')
         *
         * @returns {Promise<DeepPartial<Role>>}
         * @memberof RolesManagementClient
         */
        RolesManagementClient.prototype.create = function (code, description, namespace) {
            return __awaiter(this, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, graphqlapi_1.addRole(this.graphqlClient, this.tokenProvider, {
                                code: code,
                                description: description,
                                namespace: namespace
                            })];
                        case 1:
                            res = _a.sent();
                            return [2 /*return*/, res.createRole];
                    }
                });
            });
        };
        /**
         * @name delete
         * @name_zh 删除角色
         * @description 删除角色
         *
         * @param {string} code 角色唯一标志符
         * @param {string} [namespace] 角色所属的 Namespace code，默认值为 'default'
         *
         * @example
         * managementClient.roles.delete('rolea')
         *
         * @returns {Promise<CommonMessage>}
         * @memberof RolesManagementClient
         */
        RolesManagementClient.prototype.delete = function (code, namespace) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, graphqlapi_1.deleteRole(this.graphqlClient, this.tokenProvider, {
                                code: code,
                                namespace: namespace
                            })];
                        case 1:
                            data = (_a.sent()).deleteRole;
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        /**
         * @name deleteMany
         * @name_zh 批量删除角色
         * @description 批量删除角色
         *
         * @param {string[]} codeList 角色唯一标志符列表
         * @param {string} [namespace] 角色所属的 Namespace，默认值为 'default'
         *
         * @example
         * managementClient.roles.delete(['rolea'])
         *
         * @returns {Promise<CommonMessage>}
         * @memberof RolesManagementClient
         */
        RolesManagementClient.prototype.deleteMany = function (codeList, namespace) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, graphqlapi_1.deleteRoles(this.graphqlClient, this.tokenProvider, {
                                codeList: codeList,
                                namespace: namespace
                            })];
                        case 1:
                            data = (_a.sent()).deleteRoles;
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        /**
         * @name update
         * @name_zh 修改角色
         * @description 修改角色
         *
         * @param {string} code 角色唯一标志符
         * @param {Object} options
         * @param {string} options.description 描述信息
         * @param {string} options.newCode 新的唯一标志符
         * @param {string} options.namespace 角色所属的 Namespace，默认值为 'default'
         *
         * @example
         * managementClient.roles.update('rolea', {newCode: 'newcode'})
         *
         *
         * @returns {Promise<DeepPartial<Role>>}
         * @memberof RolesManagementClient
         */
        RolesManagementClient.prototype.update = function (code, options) {
            return __awaiter(this, void 0, void 0, function () {
                var description, newCode, namespace, data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            description = options.description, newCode = options.newCode, namespace = options.namespace;
                            return [4 /*yield*/, graphqlapi_1.updateRole(this.graphqlClient, this.tokenProvider, {
                                    code: code,
                                    description: description,
                                    newCode: newCode,
                                    namespace: namespace
                                })];
                        case 1:
                            data = (_a.sent()).updateRole;
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        /**
         *
         * @name detail
         * @name_zh 获取角色详情
         * @description 获取角色详情
         *
         * @param {string} code 角色唯一标志符
         * @param {string} [namespace] 角色所属的 Namespace，默认值为 'default'
         *
         * @example`
         * managementClient.roles.detail('manager')
         *
         * @returns {Promise<DeepPartial<Role>>} 角色详情
         * @memberof RolesManagementClient
         */
        RolesManagementClient.prototype.detail = function (code, namespace) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, graphqlapi_1.role(this.graphqlClient, this.tokenProvider, {
                                code: code,
                                namespace: namespace
                            })];
                        case 1:
                            data = (_a.sent()).role;
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        /**
         * @name list
         * @name_zh 获取角色列表
         * @description 获取角色列表
         *
         * @param {Object} [options]
         * @param {number} [options.page=1] 页码数
         * @param {number} [options.limit=10] 每页个数
         * @param {string} [options.namespace] 角色所属的 Namespace，默认值为 'default'
         *
         * @example
         * managementClient.roles.list(2, 10)
         *
         * @returns {Promise<DeepPartial<PaginatedRoles>>}
         * @memberof RolesManagementClient
         */
        RolesManagementClient.prototype.list = function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, _b, page, _c, limit, namespace, data;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            _a = options || {}, _b = _a.page, page = _b === void 0 ? 1 : _b, _c = _a.limit, limit = _c === void 0 ? 10 : _c, namespace = _a.namespace;
                            return [4 /*yield*/, graphqlapi_1.roles(this.graphqlClient, this.tokenProvider, {
                                    page: page,
                                    limit: limit,
                                    namespace: namespace
                                })];
                        case 1:
                            data = (_d.sent()).roles;
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        /**
         * @name listUsers
         * @name_zh 获取角色用户列表
         * @description 获取角色用户列表
         *
         * @param {string} code 角色唯一标志符
         * * @param {string} [namespace] 角色所属的 Namespace，默认值为 'default'
         *
         * @example
         * managementClient.roles.listUsers(code)
         *
         * @returns {Promise<DeepPartial<PaginatedUsers>>}
         * @memberof RolesManagementClient
         */
        RolesManagementClient.prototype.listUsers = function (code, namespace) {
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, graphqlapi_1.roleWithUsers(this.graphqlClient, this.tokenProvider, {
                                code: code,
                                namespace: namespace
                            })];
                        case 1:
                            data = (_a.sent()).role;
                            return [2 /*return*/, data.users];
                    }
                });
            });
        };
        /**
         * @name addUsers
         * @name_zh 添加用户
         * @description 添加用户
         *
         * @param {string} code 角色唯一标志符
         * @param {string[]} userIds 用户 ID 列表
         * @param {string} [namespace] 角色所属的 Namespace，默认值为 'default'
         *
         * @example
         * managementClient.roles.addUsers(code, ['USERID1', 'USERID2'])
         *
         * @returns {Promise<CommonMessage>}
         * @memberof RolesManagementClient
         */
        RolesManagementClient.prototype.addUsers = function (code, userIds, namespace) {
            return __awaiter(this, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, graphqlapi_1.assignRole(this.graphqlClient, this.tokenProvider, {
                                roleCode: code,
                                userIds: userIds,
                                namespace: namespace
                            })];
                        case 1:
                            res = _a.sent();
                            return [2 /*return*/, res.assignRole];
                    }
                });
            });
        };
        /**
         * @name removeUsers
         * @name_zh 移除用户
         *
         * @description 移除用户
         *
         * @param {string} code 角色唯一标志符
         * @param {string[]} userIds 用户 ID 列表
         * @param {string} [namespace] 角色所属的 Namespace，默认值为 'default'
         *
         * @example
         * managementClient.roles.removeUsers(code, ['USERID1', 'USERID2'])
         *
         * @returns {Promise<CommonMessage>}
         * @memberof RolesManagementClient
         */
        RolesManagementClient.prototype.removeUsers = function (code, userIds, namespace) {
            return __awaiter(this, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, graphqlapi_1.revokeRole(this.graphqlClient, this.tokenProvider, {
                                roleCode: code,
                                userIds: userIds,
                                namespace: namespace
                            })];
                        case 1:
                            res = _a.sent();
                            return [2 /*return*/, res.revokeRole];
                    }
                });
            });
        };
        /**
         * @name listPolicies
         * @name_zh 获取角色策略列表
         *
         * @description 获取角色策略列表
         *
         * @param {string} code 角色唯一标志符
         * @param {number} [page=1] 页码数
         * @param {number} [limit=10] 页码个数
         * @example
         *  managementClient.roles.listPolicies('codea', 1, 10)
         *
         * @returns {Promise<PaginatedPolicyAssignments>}
         * @memberof RolesManagementClient
         */
        RolesManagementClient.prototype.listPolicies = function (code, page, limit) {
            if (page === void 0) { page = 1; }
            if (limit === void 0) { limit = 10; }
            return __awaiter(this, void 0, void 0, function () {
                var data;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, graphqlapi_1.policyAssignments(this.graphqlClient, this.tokenProvider, {
                                targetType: graphql_v2_1.PolicyAssignmentTargetType.Role,
                                targetIdentifier: code,
                                page: page,
                                limit: limit
                            })];
                        case 1:
                            data = (_a.sent()).policyAssignments;
                            return [2 /*return*/, data];
                    }
                });
            });
        };
        /**
         * @name addPolicies
         * @name_zh 授权策略
         *
         * @description 给角色授权策略策略
         *
         * @param {string} code 角色唯一标志符
         * @param {string[]} policies 策略列表
         * @example
         * managementClient.roles.addPolicies('rolea', ['PolicyA', 'PolicyB'])
         *
         * @returns {Promise<CommonMessage>}
         * @memberof RolesManagementClient
         */
        RolesManagementClient.prototype.addPolicies = function (code, policies) {
            return __awaiter(this, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, graphqlapi_1.addPolicyAssignments(this.graphqlClient, this.tokenProvider, {
                                targetType: graphql_v2_1.PolicyAssignmentTargetType.User,
                                targetIdentifiers: [code],
                                policies: policies
                            })];
                        case 1:
                            res = _a.sent();
                            return [2 /*return*/, res.addPolicyAssignments];
                    }
                });
            });
        };
        /**
         * @name removePolicies
         * @name_zh 角色移除策略
         *
         * @description 角色移除策略
         *
         * @param {string} code 角色唯一标志符
         * @param {string[]} policies 策略列表
         * @example
         * managementClient.roles.removePolicies('rolea', ['PolicyA', 'PolicyB'])
         *
         * @returns {Promise<CommonMessage>}
         * @memberof RolesManagementClient
         */
        RolesManagementClient.prototype.removePolicies = function (code, policies) {
            return __awaiter(this, void 0, void 0, function () {
                var res;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, graphqlapi_1.removePolicyAssignments(this.graphqlClient, this.tokenProvider, {
                                targetType: graphql_v2_1.PolicyAssignmentTargetType.User,
                                targetIdentifiers: [code],
                                policies: policies
                            })];
                        case 1:
                            res = _a.sent();
                            return [2 /*return*/, res.removePolicyAssignments];
                    }
                });
            });
        };
        /**
         * @description 获取角色被授权的所有资源
         *
         * @param code: 角色 code
         * @param namespace: 角色权限组 namespace code
         * @param options.resourceType 资源类型
         */
        RolesManagementClient.prototype.listAuthorizedResources = function (code, namespace, options) {
            return __awaiter(this, void 0, void 0, function () {
                var resourceType, role, _a, list, totalCount;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            resourceType = (options || {}).resourceType;
                            return [4 /*yield*/, graphqlapi_1.listRoleAuthorizedResources(this.graphqlClient, this.tokenProvider, {
                                    code: code,
                                    namespace: namespace,
                                    resourceType: resourceType
                                })];
                        case 1:
                            role = (_b.sent()).role;
                            if (!role) {
                                throw new Error('角色不存在');
                            }
                            _a = role.authorizedResources, list = _a.list, totalCount = _a.totalCount;
                            list = utils_1.formatAuthorizedResources(list);
                            return [2 /*return*/, {
                                    list: list,
                                    totalCount: totalCount
                                }];
                    }
                });
            });
        };
        return RolesManagementClient;
    }());
    exports.RolesManagementClient = RolesManagementClient;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUm9sZXNNYW5hZ2VtZW50Q2xpZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2xpYi9tYW5hZ2VtZW50L1JvbGVzTWFuYWdlbWVudENsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFHQSxxREFTZ0M7SUFDaEMsNENBY3VCO0lBRXZCLGtDQUFxRDtJQUVyRDs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQW1CRztJQUNIO1FBS0UsK0JBQ0UsT0FBZ0MsRUFDaEMsYUFBNEIsRUFDNUIsYUFBc0M7WUFFdEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7WUFDdkIsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7WUFDbkMsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDckMsQ0FBQztRQUVEOzs7Ozs7Ozs7Ozs7OztXQWNHO1FBQ0csc0NBQU0sR0FBWixVQUNFLElBQVksRUFDWixXQUFvQixFQUNwQixTQUFrQjs7Ozs7Z0NBRU4scUJBQU0sb0JBQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUU7Z0NBQ2hFLElBQUksTUFBQTtnQ0FDSixXQUFXLGFBQUE7Z0NBQ1gsU0FBUyxXQUFBOzZCQUNWLENBQUMsRUFBQTs7NEJBSkksR0FBRyxHQUFHLFNBSVY7NEJBQ0Ysc0JBQU8sR0FBRyxDQUFDLFVBQVUsRUFBQzs7OztTQUN2QjtRQUVEOzs7Ozs7Ozs7Ozs7O1dBYUc7UUFDRyxzQ0FBTSxHQUFaLFVBQWEsSUFBWSxFQUFFLFNBQWtCOzs7OztnQ0FDZCxxQkFBTSx1QkFBVSxDQUMzQyxJQUFJLENBQUMsYUFBYSxFQUNsQixJQUFJLENBQUMsYUFBYSxFQUNsQjtnQ0FDRSxJQUFJLE1BQUE7Z0NBQ0osU0FBUyxXQUFBOzZCQUNWLENBQ0YsRUFBQTs7NEJBUG1CLElBQUksR0FBSyxD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